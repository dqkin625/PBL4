import google.generativeai as genai
from typing import List, Dict
import os
from datetime import datetime, timezone

# C·∫•u h√¨nh Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

def create_news_bulletin(articles: List[Dict]) -> Dict:
    
    if not GEMINI_API_KEY:
        return {
            "success": False,
            "error": "GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
            "bulletin": None
        }
    
    if not articles:
        return {
            "success": False, 
            "error": "Kh√¥ng c√≥ b√†i vi·∫øt n√†o ƒë·ªÉ t·ªïng h·ª£p",
            "bulletin": None
        }
    
    try:
        prompt = create_bulletin_prompt(articles)
        
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Generate content
        response = model.generate_content(prompt)
        
        if response and response.text:
            return {
                "success": True,
                "bulletin": response.text.strip(),
                "articles_processed": len(articles),
                "sources_used": list(set([article.get("source", "unknown") for article in articles])),
                "generated_at": datetime.now(timezone.utc).isoformat(),
                "error": None
            }
        else:
            return {
                "success": False,
                "error": "Gemini kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£",
                "bulletin": None
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": f"L·ªói khi g·ªçi Gemini API: {str(e)}",
            "bulletin": None
        }


def create_bulletin_prompt(articles: List[Dict]) -> str:
    
    # Header c·ªßa prompt
    prompt = """B·∫°n l√† m·ªôt bi√™n t·∫≠p vi√™n chuy√™n nghi·ªáp v·ªÅ tin t·ª©c ti·ªÅn ƒëi·ªán t·ª≠. H√£y t·∫°o m·ªôt b·∫£n tin t·ªïng h·ª£p ng·∫Øn g·ªçn v√† chuy√™n nghi·ªáp t·ª´ c√°c b√†i vi·∫øt tin t·ª©c crypto sau ƒë√¢y.

Y√äU C·∫¶U:
1. T√≥m t·∫Øt c√°c tin t·ª©c quan tr·ªçng nh·∫•t trong 3-5 ƒëi·ªÉm ch√≠nh
2. S·∫Øp x·∫øp theo m·ª©c ƒë·ªô quan tr·ªçng (tin t√°c ƒë·ªông l·ªõn tr∆∞·ªõc)
3. M·ªói ƒëi·ªÉm kh√¥ng qu√° 2-3 c√¢u
4. S·ª≠ d·ª•ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp
5. T·∫≠p trung v√†o nh·ªØng th√¥ng tin c√≥ t√°c ƒë·ªông ƒë·∫øn th·ªã tr∆∞·ªùng crypto
6. Tr√°nh l·∫∑p l·∫°i th√¥ng tin gi·ªëng nhau t·ª´ nhi·ªÅu ngu·ªìn

ƒê·ªäNH D·∫†NG:
üìä B·∫¢N TIN CRYPTO T·ªîNG H·ª¢P

üî• ƒêI·ªÇM CH√çNH:
‚Ä¢ [ƒêi·ªÉm 1]
‚Ä¢ [ƒêi·ªÉm 2]  
‚Ä¢ [ƒêi·ªÉm 3]

---
C√ÅC B√ÄI VI·∫æT NGU·ªíN:

"""
    
    for i, article in enumerate(articles, 1):
        title = article.get("title", "Kh√¥ng c√≥ ti√™u ƒë·ªÅ")
        content = article.get("content", "Kh√¥ng c√≥ n·ªôi dung")
        source = article.get("source", "unknown")
        published_time = article.get("published_time", "")
        
        prompt += f"""
{i}. NGU·ªíN: {source.upper()}
TI√äU ƒê·ªÄ: {title}
TH·ªúI GIAN: {published_time}
N·ªòI DUNG: {content}

---
"""
    
    prompt += "\nH√£y t·∫°o b·∫£n tin t·ªïng h·ª£p theo y√™u c·∫ßu tr√™n:"
    
    return prompt


def summarize_single_article(title: str, content: str) -> Dict:
    """
    T√≥m t·∫Øt m·ªôt b√†i vi·∫øt ƒë∆°n l·∫ª b·∫±ng Gemini
    
    Args:
        title: Ti√™u ƒë·ªÅ b√†i vi·∫øt
        content: N·ªôi dung b√†i vi·∫øt
        
    Returns:
        Dict: K·∫øt qu·∫£ t√≥m t·∫Øt
    """
    
    if not GEMINI_API_KEY:
        return {
            "success": False,
            "error": "GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
            "summary": None
        }
    
    try:
        prompt = f"""H√£y t√≥m t·∫Øt b√†i vi·∫øt crypto n√†y th√†nh 2-3 c√¢u ng·∫Øn g·ªçn, t·∫≠p trung v√†o th√¥ng tin quan tr·ªçng nh·∫•t:

TI√äU ƒê·ªÄ: {title}

N·ªòI DUNG: {content}

T√ìM T·∫ÆT:"""

        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        if response and response.text:
            return {
                "success": True,
                "summary": response.text.strip(),
                "error": None
            }
        else:
            return {
                "success": False,
                "error": "Gemini kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£",
                "summary": None
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": f"L·ªói khi g·ªçi Gemini API: {str(e)}",
            "summary": None
        }
